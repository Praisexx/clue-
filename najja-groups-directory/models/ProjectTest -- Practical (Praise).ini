ProjectTest -- Practical (Praise)
Project: Nigerian Diaspora Groups Web Directory
1. Overview
Purpose:
The Nigerian Diaspora Groups Directory will serve as a lightweight, secure, and mobile-optimized platform
showcasing organizations across the Nigerian diaspora. It aims to foster visibility, networking, and engagement
while providing a trusted resource for communities, researchers, and partners.
Target Users:
Core Goals:
2. Functional Requirements
Homepage
Search Results Page
•
Diaspora group leaders (to list and promote their organizations)
•
Community members (to discover and connect with groups)
•
Researchers (to access structured information about diaspora organizations)
•
Partners & sponsors (seeking collaborations and engagement opportunities)
•
Simplicity and clean design
•
Speed and lightweight performance
•
Robust security against data theft and injection attacks
•
Fully mobile responsive
•
Optimized for SEO and discoverability
•
Prominent search field with autosuggest (groups, categories, tags) and location field
•
Rotating featured groups: randomly displayed with logo, name, and short description.
Nigerian news feed integration (via NGEX API: ). •
https://ngex.com
•
FAQ for common questions ( can be updated manually)
•
Add A Group button prominently placed to take use to place to create account and submit form info.
•
Ad slots for standard IAB sizes (728x90, 300x250, 250x250) for in-house/Google AdSense.
•
Clean, fast-loading layout with minimal clutter.
•
Search results by keyword, tag, category, or group name.
•
Auto-detect user location → show nearby groups within a configurable radius of the user location.
•
SEO-friendly URLs and metadata for search engine indexing.
Group Profile Page
•
Group name and logo.
•
Full description.
•
Contact info (address, telephone with click-to-call, email, website).
•
Social media links: Facebook, Instagram, Twitter, LinkedIn.
• Meeting days/times.
•
Optional image gallery.
•
Contact Us button: opens secure, CAPTCHA-protected pop-up form (messages routed to admin or group).
•
Additional fields: year founded, member size, membership type (public/private).
Admin Panel
•
Secure login
•
CRUD functionality for group listings (add/edit/delete).
•
Upload logos, images, documents.
3. Technical Requirements
•
Backend: Lightweight framework (Laravel, Node.js, or Django).
•
Frontend: Responsive HTML5, CSS3, JavaScript (Bootstrap or Tailwind recommended).
•
Database: Secure relational DB (PostgreSQL/MySQL). Use input sanitization, prepared statements, ORM.
•
Security:
•
SQL injection, XSS, CSRF protection.
•
HTTPS/TLS encryption.
•
CAPTCHA and rate-limiting for forms.
•
SEO:
•
Optimized metadata, schema markup, sitemap.xml.
•
Fast load times, mobile-first indexing.
4. Performance & Accessibility
• Mobile-first design philosophy.
• WCAG 2.1 accessibility compliance.
•
Optimized for low-bandwidth environments.
•
Lazy loading for images and heavy assets.
•
Performance Requirements
•
Homepage load time: <2 seconds
•
Images optimized with WebP format and lazy loading
•
Critical CSS inlined, non-critical CSS deferred
• Minimal JavaScript footprint
5. Deployment & Maintenance
•
Hosting: VPS/cloud-based with CDN (e.g., DigitalOcean, AWS Lightsail, Cloudflare).
•
Daily automated backups, stored separately.
•
Recovery plan documented.
•
Admin manual for content management.
•
Scalable architecture (future APIs, user accounts, etc.).
Project Spec — Naija Groups (Nigerian Diaspora Groups
Web Directory)
0) Goals & Non-Goals
Goals
•
Lightning-fast, mobile-first directory of Nigerian diaspora groups.
•
Powerful search (keyword + facets + geolocation radius).
•
Clean group profiles with secure contact form.
•
Simple, secure admin (CRUD, moderation, basic analytics).
•
SEO + accessibility + performance targets met.
Non-Goals (MVP)
•
No public user accounts.
•
No payments/donations.
•
No advanced CMS beyond what’s listed.
1) Tech Stack (opinionated, simple, robust)
•
Frontend: Next.js (SSR/ISR) + TypeScript + TailwindCSS
•
Backend API: Node.js (NestJS or Express + Zod validation)
•
DB: PostgreSQL 14+ with PostGIS (for geosearch)
•
Cache/CDN: Cloudflare (static + edge caching)
•
Uploads: S3-compatible (e.g., Cloudflare R2 / DO Spaces) + signed URLs
•
Auth (Admin): JWT (access+refresh) + BCrypt; sessions via httpOnly cookies
•
Security: Helmet, CSRF token for admin panel, rate-limits on public forms
•
Search: Postgres full-text + trigram + PostGIS distance filter
•
Analytics: GA4 + server-side event counters
•
News: NGEX API integration with server-side caching/fallback
Env flags in .env :
DATABASE_URL=...
STORAGE_BUCKET=...
JWT_SECRET=...
RECAPTCHA_SECRET=...
NGEX_API_URL=https://ngex.com/...
GA_MEASUREMENT_ID=...
NODE_ENV=production
2) Information Architecture & UX
Public Pages
1. Homepage
•
Hero search bar: What (keywords/categories/tags) + Where (location text or use my location)
•
Featured groups carousel (randomized from curated set)
•
Nigerian news strip (NGEX feed; cached)
•
FAQ section (editable in admin)
•
Ad slots: 728×90 (desktop), 300×250 & 250×250 (sidebar/footer)
•
CTA: “Add a Group” → admin/mgmt intake flow (private for MVP)
2. Search Results
•
Query parsing: q , category , tags[] , meeting_day , lat , lng , radius(km)
•
Auto-detect location (browser geolocation with consent)
•
Filters sidebar (collapsible on mobile): location, category, meeting day, membership type
•
Sort: “Relevance” (default), “Nearest”, “Most Viewed”, “Recently Updated”
•
SEO-friendly URLs: /search?q=rccg&location=ikoyi
Admin (role-based)
Accessibility: WCAG 2.1 AA (keyboard nav, labels, contrast, focus states).
3) Data Model (Postgres + PostGIS)
-- GeographiesCREATE EXTENSION IF NOT EXISTS postgis;
CREATE TABLE places (
 id SERIAL PRIMARY KEY,
 name TEXT NOT NULL,
 kind TEXT NOT NULL, -- city|region|country
 geom GEOGRAPHY(POLYGON, 4326) -- optional for future polygon search
);
-- GroupsCREATE TABLE groups (
 id BIGSERIAL PRIMARY KEY,
 slug TEXT UNIQUE NOT NULL,
 name TEXT NOT NULL,
 description TEXT,
 address TEXT,
 city TEXT, region TEXT, country TEXT,
 lat DOUBLE PRECISION, lng DOUBLE PRECISION,
 geom GEOGRAPHY(POINT, 4326),
 phone TEXT, email TEXT, website TEXT,
3. Group Profile
•
Header: logo, name, category chips
•
Body: full description, contact info (click-to-call), website, socials
• Meeting days/times, founded year, member size, membership type
•
Gallery (lazy-loaded, WebP)
•
Contact modal: reCAPTCHA + rate-limit; routes to admin inbox (and optionally group email)
•
Structured data ( Organization / LocalBusiness schema)
4. System
•
404, 500, maintenance pages
•
Cookie/consent banner for analytics/ads
•
Sitemap, robots.txt
•
Auth (login/logout, password reset)
•
Groups CRUD: create/edit/delete (with slug), upload logo & gallery
• Moderation: review/mark contact messages, export CSV
•
Content: FAQ editor (Markdown), Featured groups picker
•
Analytics (basic): views/clicks per group, searches per day, messages volume
•
Ad settings: toggle ad slots; paste AdSense codes
•
News: view cache status / force refresh
 socials JSONB, -- {facebook, instagram, twitter, linkedin}
 meeting_days TEXT[], -- ['Sun','Wed'] etc
 founded_year INT,
 member_size INT,
 membership_type TEXT, -- public|private
 categories TEXT[], -- ['church','association','student']
 tags TEXT[],
 featured BOOLEAN DEFAULT FALSE,
 verified BOOLEAN DEFAULT FALSE,
 views_count BIGINT DEFAULT 0,
 clicks_count BIGINT DEFAULT 0,
 updated_at TIMESTAMP DEFAULT now(),
 created_at TIMESTAMP DEFAULT now()
);
CREATE INDEX idx_groups_geom ON groups USING GIST (geom);
CREATE INDEX idx_groups_fts ON groups USING GIN (to_tsvector('simple', coalesce(name,'')||'
'||coalesce(array_to_string(categories,' '), '')||' '||coalesce(array_to_string(tags,' '), '')));
CREATE INDEX idx_groups_trgm ON groups USING GIN (name gin_trgm_ops);
-- MediaCREATE TABLE media (
 id BIGSERIAL PRIMARY KEY,
 group_id BIGINT REFERENCES groups(id) ON DELETE CASCADE,
 kind TEXT, -- logo|gallery
 url TEXT NOT NULL,
 width INT, height INT
);
-- Contact messagesCREATE TABLE contact_messages (
 id BIGSERIAL PRIMARY KEY,
 group_id BIGINT REFERENCES groups(id) ON DELETE CASCADE,
 name TEXT, email TEXT, phone TEXT,
 message TEXT,
 ip INET, user_agent TEXT,
 created_at TIMESTAMP DEFAULT now(),
 handled BOOLEAN DEFAULT FALSE
);
-- Admin users & rolesCREATE TABLE admins (
 id BIGSERIAL PRIMARY KEY,
 email TEXT UNIQUE NOT NULL,
 password_hash TEXT NOT NULL,
 role TEXT NOT NULL DEFAULT 'editor' -- editor|admin
);
4) API Design (REST)
Public
GET /api/search •
•
Query: q, category, tags, meeting_day, lat, lng, radius(=25km default), page, sort
Behavior: Stage A: results within radius ; if <N results (e.g., 20), expand radius (+10km steps; cap
50km); score = text relevance + distance decay + verified boost.
•
GET /api/groups/:slug •
Admin (JWT)
Observability hooks
Error model
{ "error": { "code": "VALIDATION_ERROR", "message": "...", "fields": {...} } }
5) Search & Ranking (server logic)
Text relevance
Geo
Score (conceptual)
score = 0.55*text_score
 + 0.30*distance_decay -- if user provided location
 + 0.10*(verified ? 1 : 0)
 + 0.05*log(1+views_count)
Fallback when no user location: sort by text_score, verified, recency.
6) Security & Compliance
POST /api/contact (rate-limited; reCAPTCHA required) •
•
Body: { groupId, name, email, phone?, message, recaptchaToken }
•
Side-effects: store message → optional email notify admin → increment message metric.
POST /api/auth/login , POST /api/auth/logout , POST /api/auth/refresh •
GET/POST/PATCH/DELETE /api/admin/groups •
POST /api/admin/groups/:id/media (signed URL workflow) •
GET /api/admin/messages?handled=false •
PATCH /api/admin/messages/:id (mark handled) •
GET /api/admin/analytics/summary (views, clicks, searches, messages) •
PATCH /api/admin/settings/featured (set featured list) •
GET /api/admin/news/cache-status , POST /api/admin/news/refresh •
POST /api/track/view { groupId } (increment views) •
POST /api/track/click { groupId, kind } (phone/email/website) •
to_tsvector on (name + categories + tags) + trigram similarity on name. •
•
If lat/lng present: ST_DWithin(geom, :point, :radius_meters)
•
Distance decay: 1/(1 + distance_km)
•
HTTPS everywhere; HSTS; secure cookies.
•
Helmet (CSP with allowlists for NGEX, GA, Ads).
•
CSRF for admin panel mutations.
7) Performance Targets & Tactics
8) SEO & Accessibility
9) Admin UX Flows (happy-path)
10) QA Acceptance Criteria (by feature)
Homepage
•
Input validation (Zod) on all endpoints; parameterized queries via ORM.
reCAPTCHA + IP rate limiting on /api/contact and search endpoints. •
•
Sanitize uploads (file type/size), virus scan if feasible.
•
Least-privilege DB user; daily automated off-site backups (retain 30 days).
•
Audit logs for admin mutations (optional but recommended).
•
TTFB < 200ms (cached pages), LCP < 2.0s, CLS < 0.1, INP < 200ms.
•
Pre-render (ISR) for group pages; SWR on client list views.
•
Image pipeline: WebP, responsive <img srcset> , lazy-loading.
•
Inline critical CSS; split JS by route; avoid heavy libs.
•
DB indexes: GIST on geom , GIN on FTS/trigram.
•
Cache NGEX responses for 15 minutes; graceful fallback on failure.
•
Clean slugs: /groups/redeemed-christian-church-dallas
• Meta tags, OpenGraph/Twitter cards.
•
Structured data: Organization (and Place if address present).
•
XML sitemap & dynamic robots.txt.
•
A11y: semantic landmarks, labels, skip links, keyboard traps avoided, color contrast AA.
•
Login → JWT set in httpOnly cookie → redirect to Dashboard.
•
Create Group → form with live slug, map picker (drop pin) → upload logo/gallery (signed URLs) → save.
• Moderate Messages → list, detail view, “mark handled”, export CSV.
•
Feature Group → toggle in group form or select from Featured screen.
•
FAQ Edit → Markdown editor → preview → publish.
•
Search suggests by group name & category as you type.
•
Featured carousel rotates on each visit.
•
NGEX feed displays; if API down, shows cached or hides section gracefully.
Loads under 2s on 3G emulation (Lighthouse ≥ 90 perf).
Search
Group Profile
Admin
Security
11) Testing Plan
12) DevOps & Deployment
•
•
Given lat/lng , results within 25km; if <20, expands to 35/50km with label “Nearby to {place}”.
•
Filters combine (category + meeting day) and update URL.
•
Sorting changes order deterministically.
•
Phone link triggers tel: ; website opens in new tab; socials open correctly.
•
Contact modal requires reCAPTCHA; rate-limited (e.g., 3/min/IP).
•
Schema markup validates (Rich Results test).
•
Only authenticated admins can mutate.
•
Logo/gallery upload rejects non-image types; stores WebP variants.
• Messages list paginates; CSV export generates and downloads.
•
Verified by automated tests for CSRF on admin mutations.
•
SQLi/XSS attempts are blocked in test suite.
•
Unit: services, validators, query builders (Jest)
•
Integration: API endpoints (supertest)
•
E2E: user journeys (Playwright) — search, open profile, send message
•
Performance: Lighthouse CI; k6 load test for search
•
Security: OWASP ZAP baseline scan in CI
•
Accessibility: axe-core checks in CI
•
Environments: dev → staging → prod
•
CI/CD: GitHub Actions
•
Lint/Typecheck/Test
•
Build Docker images
•
Run migrations
•
Deploy to DO/AWS Lightsail
•
Runtime: Nginx reverse proxy → Node API + Next server; static via CDN
•
TLS: Let’s Encrypt (auto-renew)
Backups: Nightly DB snapshot to object storage; tested restore doc
14) Handover & Docs
15) Future-Ready Hooks
Developer Checklist (printable)
Reference Platforms for UI Inspiration
1.
👉
•• Monitoring: UptimeRobot/Healthchecks; error tracking (Sentry)
•
Admin manual (PDF): content editing, featured groups, message handling, exports
•
Runbook: deploy steps, rollback, restore from backup
•
API Reference: OpenAPI (Swagger)
•
Schema ERD: PNG + SQL migrations
•
Accounts for group owners (claim/verify listings)
• WhatsApp Business API integration for contact
•
Polygonal place search & neighbor expansion
•
Public submissions queue with moderation
DB migrations applied; indexes present (FTS, GIST, trigram) •
Search returns relevant + nearby results with clear labels •
Contact form protected (reCAPTCHA + rate limit) •
Admin auth + RBAC locked down; CSRF on mutations •
Images optimized (WebP, lazy) •
SEO (meta, OG, schema, sitemap) + A11y checks pass •
Backups running + restore tested
•
CI green: unit/integration/E2E/perf/security •
Meetup.com
https://www.meetup.com/
• Why reference it: Clean group profiles, clear event listings, intuitive filtering by location/interest.
• What to borrow:
•
Group landing pages with big banner + details.
•
Location-aware search and filter chips.
2. Yelp (Local Directory)
👉
3. Eventbrite
👉
Design Reference & UI Quality Benchmark
The developer should take visual inspiration from , , and . These platforms
demonstrate how to combine:
Clean directory browsing (search + filters + map)
Modern card-based listings
Intuitive group profile pages with clear calls-to-action
Mobile-first, responsive layouts with fast load speeds
Our UI should not copy these exactly, but match their clarity and polish, while keeping the Naija Groups identity
(colors, typography, and branding).
•
Strong mobile-first layouts.
https://www.yelp.com/
• Why reference it: Excellent directory UI, category filters, map integration, and community reviews.
• What to borrow:
•
Search results page layout (list + map).
•
Filter sidebar with mobile-friendly drawer.
•
Card-based group listings with consistent typography.
https://www.eventbrite.com/
• Why reference it: Polished event/community browsing, strong CTA placement, and SEO-friendly design.
• What to borrow:
•
Hero search bars with autocomplete.
• Modern event/community cards with imagery.
•
Responsive grid that adapts beautifully